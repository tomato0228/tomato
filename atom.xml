<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tomato Blog</title>
  
  <subtitle>The days of Tomato and Readmore</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.readmore.ltd/"/>
  <updated>2018-05-09T13:15:47.102Z</updated>
  <id>http://www.readmore.ltd/</id>
  
  <author>
    <name>Tomato</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode_4_两个排序数组的中位数</title>
    <link href="http://www.readmore.ltd/2018/05/09/LeetCode-4-%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://www.readmore.ltd/2018/05/09/LeetCode-4-两个排序数组的中位数/</id>
    <published>2018-05-09T13:05:04.000Z</published>
    <updated>2018-05-09T13:15:47.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="noopener"><code>两个排序数组的中位数</code></a> <a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/" target="_blank" rel="noopener"><code>Median of Two Sorted Arrays</code></a></p><p>给定两个大小为 m 和 n 的有序数组 <strong>nums1</strong> 和 <strong>nums2</strong> 。<br>请找出这两个有序数组的中位数。要求算法的时间复杂度为 $O(\log (m+n))$ 。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line">中位数是 2.0</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line">中位数是 (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure><p><strong>Tags</strong>: 数组，二分查找，分治算法</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums1.size();</span><br><span class="line">        <span class="keyword">int</span> m = nums2.size();</span><br><span class="line">        <span class="keyword">int</span> l = (n + m + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = (n + m + <span class="number">2</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>* ln = n &gt; <span class="number">0</span> ? &amp;nums1[<span class="number">0</span>] : <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">int</span>* rn = m &gt; <span class="number">0</span> ? &amp;nums2[<span class="number">0</span>] : <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> ( getKth(ln, n, rn, m, l) + getKth(ln, n, rn, m, r) ) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>* ln, <span class="keyword">int</span> n, <span class="keyword">int</span>* rn, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; m) &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(rn, m, ln, n, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rn[k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> min(ln[<span class="number">0</span>], rn[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//int i = min(n, k / 2), j = min(m, k / 2);</span></span><br><span class="line">        <span class="keyword">int</span> i = min(n, k / <span class="number">2</span>), j = k - i;</span><br><span class="line">        <span class="keyword">if</span> (ln[i - <span class="number">1</span>] &gt; rn [j - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(ln, n, rn + j, m - j, k - j);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(ln + i, n - i, rn, m, k - i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/median-of-two-sorted
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.readmore.ltd/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://www.readmore.ltd/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode-困难" scheme="http://www.readmore.ltd/tags/LeetCode-%E5%9B%B0%E9%9A%BE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode_3_无重复字符的最长子串</title>
    <link href="http://www.readmore.ltd/2018/05/09/LeetCode-3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://www.readmore.ltd/2018/05/09/LeetCode-3-无重复字符的最长子串/</id>
    <published>2018-05-09T10:44:26.000Z</published>
    <updated>2018-05-09T11:50:15.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener"><code>无重复字符的最长子串</code></a> <a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener"><code>Longest Substring Without Repeating Characters</code></a></p><p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：abcabcbb</span><br><span class="line">输出：3</span><br><span class="line">原因：没有重复字符的最长子串是 &quot;abc&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：bbbbb</span><br><span class="line">输出：1</span><br><span class="line">原因：没有重复字符的最长子串是 &quot;b&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：pwwkew</span><br><span class="line">输出：3</span><br><span class="line">原因：没有重复字符的最长子串是 &quot;wke&quot;。请注意答案必须是一个子串，`&quot;pwke&quot;` 是 **子序列**  而不是子串。</span><br></pre></td></tr></table></figure><p><strong>Tags</strong>: 哈希表, 双指针, 字符串</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li>因为一个字符的 ASCII 的取值范围为 0–255 ，则定义一个 256 长的数组，其值表示当前循环指针 i 指向的字符的 ASCII 值为下标的字符最后一次出现在输入字符串的位置（从 0 开始）,初始化为 -1 表示没有出现过；</li><li>j 指向当前的循环指针 i 前没有重复字符子串的首字符，如字符串 abcabcbb ，i = 3 时，j = 1，i = 6 时，j = 5。</li><li>当当前i指向的字符在前面出现过时，若出现过的位置在j之前j不变，若在j之后则j指向出现过位置的下一个。</li><li>maxLen存储最长子串的长的，若现在的子串长度i - j + 1更长时更新maxLen.</li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; charIndex(<span class="number">256</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            j = max(j, charIndex[s[i]] + <span class="number">1</span>);</span><br><span class="line">            charIndex[s[i]] = i;</span><br><span class="line">            maxLen = max(maxLen, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/longest-substring-wi
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.readmore.ltd/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://www.readmore.ltd/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode-中等" scheme="http://www.readmore.ltd/tags/LeetCode-%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode_2_两数相加</title>
    <link href="http://www.readmore.ltd/2018/05/09/LeetCode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://www.readmore.ltd/2018/05/09/LeetCode-2-两数相加/</id>
    <published>2018-05-09T08:19:08.000Z</published>
    <updated>2018-05-09T11:26:38.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/add-two-numbers/description/" target="_blank" rel="noopener"><code>两数相加</code></a> <a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="noopener"><code>Add Two Numbers</code></a></p><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure><p><strong>Tags</strong>: 链表, 数学</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>一个大数相加问题，注意的是链表存储的两个非负整数，位数是按照<strong>逆序</strong>方式存储的；比如<code>342</code>这个数，存储为<code>2 -&gt; 4 -&gt; 3</code>。</p><p><strong>注意：</strong></p><ol><li>输入的两个链表可能不一样长，需要对较长链表<strong>剩余的高位</strong>和<strong>进位</strong>计算的值；</li><li>产生进位时加到下一位，即下一个结点；</li><li>循环退出后可能最后一次计算还有近位，要考虑全面。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  2 -&gt; 3 -&gt; 5 -&gt; 9 -&gt; 9</span><br><span class="line">+ 3 -&gt; 7 -&gt; 9</span><br><span class="line">----------------------------</span><br><span class="line">= 5 -&gt; 0 -&gt; 5 -&gt; 0 -&gt; 0 -&gt; 1</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        ListNode* p = l1;</span><br><span class="line">        ListNode* q = l2;</span><br><span class="line">        ListNode* t = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* result = t;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span> || q != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            sum /= <span class="number">10</span>;</span><br><span class="line">            t-&gt;next = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line">            t = t-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                sum += p-&gt;val;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (q != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                sum += q-&gt;val;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            t-&gt;val = sum % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum / <span class="number">10</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            t-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/add-two-numbers/desc
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.readmore.ltd/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://www.readmore.ltd/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode-中等" scheme="http://www.readmore.ltd/tags/LeetCode-%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode_1_两数之和(Two Sum)</title>
    <link href="http://www.readmore.ltd/2018/05/08/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://www.readmore.ltd/2018/05/08/LeetCode-1-两数之和/</id>
    <published>2018-05-08T11:44:47.000Z</published>
    <updated>2018-05-09T10:48:43.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/two-sum/description/" target="_blank" rel="noopener"><code>两数之和</code></a> <a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener"><code>Two Sum</code></a></p><p>给定一个整数数组和一个目标值，找出数组中和为目标值的<strong>两个</strong>数。<br>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。<br><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p><strong>Tags</strong>: 数组, 哈希表</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>利用 <strong>unordered_map</strong> 作为存储，键为当前元素值，索引为在 <code>numbers</code>中的下标值，比如 <code>i = 0</code> 时，此时首先要判断 <code>target - numbers[0] = 7</code> 是否在 <strong>map</strong> 中，如果不存在，那么插入键值对 <code>key = numbers[0] = 2, value = i = 0</code>，之后当 <code>i = 1</code> 时，此时判断 <code>target - numbers[1] = 2</code> 已存在于 <strong>map</strong> 中，那么取出该 <code>value = 0</code> 作为第一个返回值，当前 <code>i</code> 作为第二个返回值。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">int</span> n = numbers.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> numberToFind = target - numbers[i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>.find(numberToFind) != <span class="built_in">map</span>.end()) &#123;</span><br><span class="line">                result.push_back(<span class="built_in">map</span>[numberToFind]);</span><br><span class="line">                result.push_back(i);            </span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">map</span>[numbers[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum/description/
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.readmore.ltd/categories/LeetCode/"/>
    
    
      <category term="算法" scheme="http://www.readmore.ltd/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode-简单" scheme="http://www.readmore.ltd/tags/LeetCode-%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>Offer_53题</title>
    <link href="http://www.readmore.ltd/2018/05/07/Offer-53%E9%A2%98/"/>
    <id>http://www.readmore.ltd/2018/05/07/Offer-53题/</id>
    <published>2018-05-07T07:53:08.000Z</published>
    <updated>2018-05-07T08:31:12.596Z</updated>
    
    <content type="html"><![CDATA[<h4 id="统计一个数字在排序数组中出现的次数"><a href="#统计一个数字在排序数组中出现的次数" class="headerlink" title="统计一个数字在排序数组中出现的次数"></a>统计一个数字在排序数组中出现的次数</h4><blockquote><p>求在升序排序数组中，指定数字K第一次出现的下标和最后一次出现的下标<br>基本思想是二分查找<br>要求是输入的数组为升序</p></blockquote><p><strong>题目：统计一个数字在排序数组中出现的次数。例如输入排序数组{1,2,3,3,3,3,4,5}和数字3，由于3在这个数组中出现了4次，因此输出4。</strong></p><p><strong>二分查找</strong></p><ul><li>假设我们需要找的数字是k，那么就需要找到数组中的第一个k和最后一个k出现的位置。</li><li>如何通过二分查找得到第一个k的位置呢？<ul><li>取数组中间的数字与k作比较，</li><li>如果该数字比k大，那么k只能出现在前半部分，那么下一轮只能在前半部分找；</li><li>如果该数字比k小，那么k只能出现在后半部分，那么下一轮只能在后半部分找；</li><li>如果该数字等于k，需要判断这是不是第一个k，如果该数字的前一个数字不是k，那么该数字就是第一个k，否则需要在前半部分继续寻找第一个k；</li><li>寻找最后一个k的方法与寻找第一个k的方法一样。</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在排序数组中，指定数字K第一次出现的下标</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param data 升序数组</span></span><br><span class="line"><span class="comment"> * @param n 数组长度</span></span><br><span class="line"><span class="comment"> * @param k 指定数字</span></span><br><span class="line"><span class="comment"> * @param start 数组的某段从start开始</span></span><br><span class="line"><span class="comment"> * @param end 数组的某段在end结束</span></span><br><span class="line"><span class="comment"> * @return 指定数字K第一次出现的下标，数组中若没有K，返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFirstK</span><span class="params">(<span class="keyword">int</span> *data, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在排序数组中，指定数字K最后一次出现的下标</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param data 升序数组</span></span><br><span class="line"><span class="comment"> * @param n 数组长度</span></span><br><span class="line"><span class="comment"> * @param k 指定数字</span></span><br><span class="line"><span class="comment"> * @param start 数组的某段从start开始</span></span><br><span class="line"><span class="comment"> * @param end 数组的某段在end结束</span></span><br><span class="line"><span class="comment"> * @return 指定数字K最后一次出现的下标，数组中若没有K，返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLastK</span><span class="params">(<span class="keyword">int</span> *data, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算K出现的次数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param data 升序数组</span></span><br><span class="line"><span class="comment"> * @param n 数组长度</span></span><br><span class="line"><span class="comment"> * @param k 指定数字</span></span><br><span class="line"><span class="comment"> * @return 次数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNumberK</span><span class="params">(<span class="keyword">int</span> *data, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> data[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; getNumberK(data, n, k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFirstK</span><span class="params">(<span class="keyword">int</span> *data, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> middleIndex = (start + end) &gt;&gt; <span class="number">1</span>;<span class="comment">//移位运算比算术运算快。</span></span><br><span class="line">    <span class="keyword">int</span> middleData = data[middleIndex];</span><br><span class="line">    <span class="keyword">if</span> (middleData == k) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((middleIndex &gt; <span class="number">0</span> &amp;&amp; data[middleIndex - <span class="number">1</span>] != k) || middleIndex == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> middleIndex;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = middleIndex - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (middleData &gt; k) &#123;</span><br><span class="line">        end = middleIndex - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        start = middleIndex + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getFirstK(data, n, k, start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLastK</span><span class="params">(<span class="keyword">int</span> *data, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> middleIndex = (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> middleData = data[middleIndex];</span><br><span class="line">    <span class="keyword">if</span> (middleData == k) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((middleIndex &lt; n - <span class="number">1</span> &amp;&amp; data[middleIndex + <span class="number">1</span>] != k) || middleIndex == n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> middleIndex;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            start = middleIndex + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (middleData &gt; k) &#123;</span><br><span class="line">        end = middleIndex - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        start = middleIndex + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getLastK(data, n, k, start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNumberK</span><span class="params">(<span class="keyword">int</span> *data, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numberK = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (data != <span class="literal">nullptr</span> &amp;&amp; n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> firstIndexK = getFirstK(data, n, k, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lastIndexK = getLastK(data, n, k, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (firstIndexK &gt; <span class="number">-1</span> &amp;&amp; lastIndexK &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            numberK = lastIndexK - firstIndexK + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numberK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;统计一个数字在排序数组中出现的次数&quot;&gt;&lt;a href=&quot;#统计一个数字在排序数组中出现的次数&quot; class=&quot;headerlink&quot; title=&quot;统计一个数字在排序数组中出现的次数&quot;&gt;&lt;/a&gt;统计一个数字在排序数组中出现的次数&lt;/h4&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="剑指Offer" scheme="http://www.readmore.ltd/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="算法" scheme="http://www.readmore.ltd/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>观察者(Observer)模式</title>
    <link href="http://www.readmore.ltd/2018/05/02/%E8%A7%82%E5%AF%9F%E8%80%85-Observer-%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.readmore.ltd/2018/05/02/观察者-Observer-模式/</id>
    <published>2018-05-02T12:17:39.000Z</published>
    <updated>2018-05-02T12:37:21.895Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>观察者模式 — 让你的对象知悉现况<br>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p></blockquote><h3 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h3><p><strong>基本需求：利用WeatherData对象获取数据、并更新三个布告板：目前状况、气象统计和天气预报</strong></p><ul><li>客户有一个WeatherData对象，负责追踪温度、湿度和气压等数据。现在客户给我们提了个需求，让我们利用WeatherData对象取得数据，并更新三个布告板：目前状况、气象统计和天气预报。</li><li>WeatherData对象提供了4个接口：<ul><li><code>getTemperature()</code>：获取温度</li><li><code>getHumidity()</code>：获取湿度</li><li><code>getPressure()</code>：获取气压</li><li><code>measurementsChanged()</code>：一旦气象测量更新，此方法会被调用</li></ul></li><li>我们的工作是实现measurementsChanged()，好让它更新目前状况、气象统计、天气预报的显示布告板。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;观察者模式 — 让你的对象知悉现况&lt;br&gt;观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;提出问题&quot;&gt;&lt;a href=&quot;#提出问题&quot; 
      
    
    </summary>
    
      <category term="source" scheme="http://www.readmore.ltd/categories/source/"/>
    
    
      <category term="设计模式" scheme="http://www.readmore.ltd/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>三行情书 for Readmore</title>
    <link href="http://www.readmore.ltd/2018/05/02/%E4%B8%89%E8%A1%8C%E6%83%85%E4%B9%A6/"/>
    <id>http://www.readmore.ltd/2018/05/02/三行情书/</id>
    <published>2018-05-02T08:52:02.000Z</published>
    <updated>2018-05-02T11:20:57.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-Love-My-NightOwl"><a href="#I-Love-My-NightOwl" class="headerlink" title="I Love My NightOwl"></a>I Love My NightOwl</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Liar me = <span class="keyword">new</span> Liar();</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    me.say(<span class="string">"I never love you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>给你写的第一个博客。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-Love-My-NightOwl&quot;&gt;&lt;a href=&quot;#I-Love-My-NightOwl&quot; class=&quot;headerlink&quot; title=&quot;I Love My NightOwl&quot;&gt;&lt;/a&gt;I Love My NightOwl&lt;/h2&gt;&lt;figure c
      
    
    </summary>
    
      <category term="Readmore" scheme="http://www.readmore.ltd/categories/Readmore/"/>
    
    
      <category term="book" scheme="http://www.readmore.ltd/tags/book/"/>
    
  </entry>
  
</feed>
